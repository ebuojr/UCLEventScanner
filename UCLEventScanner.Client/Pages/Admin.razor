@page "/admin"
@using UCLEventScanner.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<PageTitle>Admin Dashboard</PageTitle>

<div>
    <div class="max-w-7xl mx-auto px-4 py-8">
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Admin Dashboard</h1>
        </div>

        <!-- Events Management -->
        <div class="bg-white border border-gray-300 rounded-lg p-6 mb-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-6">Events Management</h2>
            
            <!-- Create Event Form -->
            <div class="mb-8">
                <h3 class="text-base font-semibold text-gray-900 mb-4">Create New Event</h3>
                <EditForm Model="newEvent" OnValidSubmit="CreateEvent">
                    <DataAnnotationsValidator />
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Event Name</label>
                            <InputText @bind-Value="newEvent.Name" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => newEvent.Name)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Event Date</label>
                            <InputDate @bind-Value="newEvent.Date" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => newEvent.Date)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div class="flex items-end">
                            <button type="submit" class="@(isCreatingEvent ? "bg-gray-400" : "bg-blue-600 hover:bg-blue-700") text-white px-4 py-2 rounded-lg w-full disabled:cursor-not-allowed transition-colors" disabled="@isCreatingEvent">
                                @(isCreatingEvent ? "Creating..." : "Create Event")
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>

            <!-- Events Table -->
            <div class="overflow-x-auto">
                <table class="w-full border-collapse">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200">ID</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200">Name</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200">Date</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200">Registrations</th>
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white">
                        @if (events != null)
                        {
                            @foreach (var eventItem in events)
                            {
                                <tr class="border-b border-gray-200">
                                    <td class="px-4 py-3 text-sm text-gray-900">@eventItem.Id</td>
                                    <td class="px-4 py-3 text-sm text-gray-900">@eventItem.Name</td>
                                    <td class="px-4 py-3 text-sm text-gray-600">@eventItem.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td class="px-4 py-3 text-sm text-gray-600">@eventItem.RegistrationCount</td>
                                    <td class="px-4 py-3">
                                        <button @onclick="@(() => DeleteEvent(eventItem.Id))" class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 text-xs rounded transition-colors">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Scanner Management -->
        <div class="bg-white border border-gray-300 rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-6">Scanner Management</h2>
            
            <!-- Create Scanner Form -->
            <div class="mb-8">
                <h3 class="text-base font-semibold text-gray-900 mb-4">Open New Scanner Line</h3>
                <EditForm Model="newScanner" OnValidSubmit="CreateScanner">
                    <DataAnnotationsValidator />
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Scanner Name</label>
                            <InputText @bind-Value="newScanner.Name" placeholder="e.g., Line 4" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                            <ValidationMessage For="@(() => newScanner.Name)" class="text-red-500 text-sm mt-1" />
                        </div>
                        <div class="flex items-end">
                            <button type="submit" class="@(isCreatingScanner ? "bg-gray-400" : "bg-green-600 hover:bg-green-700") text-white px-4 py-2 rounded-lg w-full disabled:cursor-not-allowed transition-colors" disabled="@isCreatingScanner">
                                @(isCreatingScanner ? "Opening..." : "Open Scanner Line")
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>

            <!-- Scanner Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @if (scanners != null)
                {
                    @foreach (var scanner in scanners)
                    {
                        <div class="@(scanner.IsActive ? "bg-green-50 border-green-200" : "bg-gray-50 border-gray-300") border rounded-lg p-4">
                            <div class="flex justify-between items-center mb-3">
                                <h3 class="text-base font-semibold text-gray-900">@scanner.Name</h3>
                                <span class="@(scanner.IsActive ? "bg-green-100 text-green-800 border-green-200" : "bg-gray-100 text-gray-800 border-gray-200") px-2 py-1 text-xs rounded-full border">
                                    @(scanner.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                            <div class="flex space-x-2">
                                <button @onclick="@(() => ToggleScannerStatus(scanner.Id, !scanner.IsActive))" 
                                        class="@(scanner.IsActive ? "bg-yellow-600 hover:bg-yellow-700" : "bg-green-600 hover:bg-green-700") text-white text-sm px-3 py-1 rounded transition-colors">
                                    @(scanner.IsActive ? "Close" : "Open")
                                </button>
                                <button @onclick="@(() => DeleteScanner(scanner.Id))" 
                                        class="bg-red-600 hover:bg-red-700 text-white text-sm px-3 py-1 rounded transition-colors">
                                    Delete
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<EventDto>? events;
    private List<ScannerDto>? scanners;
    private CreateEventDto newEvent = new CreateEventDto { Date = DateTime.Now.AddDays(7) };
    private CreateScannerDto newScanner = new CreateScannerDto { IsActive = true };
    private bool isCreatingEvent = false;
    private bool isCreatingScanner = false;

    private string GetApiUrl(string endpoint)
    {
        var baseUrl = Configuration["ApiBaseUrl"] ?? "https://localhost:49675/";
        return $"{baseUrl.TrimEnd('/')}/{endpoint}";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        await LoadScanners();
    }

    private async Task LoadEvents()
    {
        try
        {
            events = await Http.GetFromJsonAsync<List<EventDto>>(GetApiUrl("api/events"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load events: {ex.Message}");
        }
    }

    private async Task LoadScanners()
    {
        try
        {
            scanners = await Http.GetFromJsonAsync<List<ScannerDto>>(GetApiUrl("api/scanners"));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load scanners: {ex.Message}");
        }
    }

    private async Task CreateEvent()
    {
        isCreatingEvent = true;
        try
        {
            var response = await Http.PostAsJsonAsync(GetApiUrl("api/events"), newEvent);
            if (response.IsSuccessStatusCode)
            {
                newEvent = new CreateEventDto { Date = DateTime.Now.AddDays(7) };
                await LoadEvents();
                await JSRuntime.InvokeVoidAsync("alert", "Event created successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to create event.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating event: {ex.Message}");
        }
        finally
        {
            isCreatingEvent = false;
        }
    }

    private async Task CreateScanner()
    {
        isCreatingScanner = true;
        try
        {
            var response = await Http.PostAsJsonAsync(GetApiUrl("api/scanners"), newScanner);
            if (response.IsSuccessStatusCode)
            {
                newScanner = new CreateScannerDto { IsActive = true };
                await LoadScanners();
                await JSRuntime.InvokeVoidAsync("alert", "Scanner line opened successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to open scanner line.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error opening scanner line: {ex.Message}");
        }
        finally
        {
            isCreatingScanner = false;
        }
    }

    private async Task ToggleScannerStatus(int scannerId, bool isActive)
    {
        try
        {
            var updateDto = new UpdateScannerDto { IsActive = isActive };
            var response = await Http.PutAsJsonAsync(GetApiUrl($"api/scanners/{scannerId}"), updateDto);
            if (response.IsSuccessStatusCode)
            {
                await LoadScanners();
                await JSRuntime.InvokeVoidAsync("alert", $"Scanner {(isActive ? "activated" : "deactivated")} successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update scanner status.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating scanner: {ex.Message}");
        }
    }

    private async Task DeleteEvent(int eventId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?"))
        {
            try
            {
                var response = await Http.DeleteAsync(GetApiUrl($"api/events/{eventId}"));
                if (response.IsSuccessStatusCode)
                {
                    await LoadEvents();
                    await JSRuntime.InvokeVoidAsync("alert", "Event deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete event.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting event: {ex.Message}");
            }
        }
    }

    private async Task DeleteScanner(int scannerId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this scanner?"))
        {
            try
            {
                var response = await Http.DeleteAsync(GetApiUrl($"api/scanners/{scannerId}"));
                if (response.IsSuccessStatusCode)
                {
                    await LoadScanners();
                    await JSRuntime.InvokeVoidAsync("alert", "Scanner deleted successfully!");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to delete scanner.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting scanner: {ex.Message}");
            }
        }
    }
}
